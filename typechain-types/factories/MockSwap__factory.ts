/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { MockSwap, MockSwapInterface } from "../MockSwap";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceByUser",
    outputs: [
      {
        internalType: "uint256",
        name: "usdc",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "weth",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "operatorByUser",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "setOperator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "buy",
        type: "bool",
      },
    ],
    name: "swap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x0002000000000002000400000000000200010000000103550000006001100270000000680010019d0000008001000039000000400010043f00000001012001900000003e0000c13d0000000001000031000000040110008c0000012f0000413d0000000101000367000000000101043b000000e0011002700000006a0210009c000000460000a13d0000006b0210009c000000990000613d0000006c0210009c000000f50000613d0000006d0110009c0000012f0000c13d0000000001000416000000000101004b0000012f0000c13d000000040100008a00000000011000310000007002000041000000200310008c000000000300001900000000030240190000007001100197000000000401004b000000000200a019000000700110009c00000000010300190000000001026019000000000101004b0000012f0000c13d00000004010000390000000101100367000000000101043b000000710210009c0000012f0000213d0000000000100435000000200000043f0000000001000019019901820000040f000000000201041a0000000101100039000000000101041a000000400300043d0000002004300039000000000014043500000000002304350000006801000041000000680230009c0000000001034019000000400110021000000072011001c70000019a0001042e0000000001000416000000000101004b0000012f0000c13d00000020010000390000010000100443000001200000044300000069010000410000019a0001042e0000006e0210009c000001190000613d0000006f0110009c0000012f0000c13d0000000001000416000000000101004b0000012f0000c13d000000040100008a00000000011000310000007002000041000000400310008c000000000300001900000000030240190000007001100197000000000401004b000000000200a019000000700110009c00000000010300190000000001026019000000000101004b0000012f0000c13d00000004010000390000000101100367000000000201043b000000710120009c0000012f0000213d0000000003000411000000000123004b000400000002001d000000790000613d000300000003001d00000000002004350000000101000039000000200010043f00000068010000410000000002000414000000680320009c0000000001024019000000c00110021000000074011001c70000801002000039019901940000040f000000010220019000000004020000290000012f0000613d000000000101043b000000000101041a00000071011001970000000303000029000000000113004b0000013b0000c13d0000000000200435000000200000043f00000024010000390000000101100367000000000101043b000300000001001d00000068010000410000000002000414000000680320009c0000000001024019000000c00110021000000074011001c70000801002000039019901940000040f000000010220019000000004020000290000012f0000613d000000000101043b000000000101041a00000003030000290000000003310019000000000113004b0000000001000019000000010100403900000001011001900000014d0000613d000000750100004100000000001004350000001101000039000000040010043f00000076010000410000019b000104300000000001000416000000000101004b0000012f0000c13d000000040100008a00000000011000310000007002000041000000600310008c000000000300001900000000030240190000007001100197000000000401004b000000000200a019000000700110009c00000000010300190000000001026019000000000101004b0000012f0000c13d00000001010003670000000402100370000000000302043b000000710230009c0000012f0000213d0000002402100370000000000202043b000400000002001d0000004401100370000000000201043b000000000102004b0000000001000019000000010100c039000000000112004b0000012f0000c13d0000000004000411000000000134004b000300000002001d000000d40000613d000100000004001d00000000003004350000000101000039000000200010043f00000068010000410000000002000414000200000003001d000000680320009c0000000001024019000000c00110021000000074011001c70000801002000039019901940000040f0000000203000029000000010220019000000003020000290000012f0000613d000000000101043b000000000101041a00000071011001970000000104000029000000000114004b0000013b0000c13d0000000000300435000000200000043f00000068010000410000000002000414000000680320009c0000000001024019000000c00110021000000074011001c70000801002000039019901940000040f000000010220019000000003020000290000012f0000613d000000000101043b000000000202004b000001560000c13d000000000201041a000000000202004b0000016c0000c13d00002710040000390000000105100039000000000605041a000000040200002900000000322600a9000000000306004b00000000030100190000017d0000613d00000000636200d90000000406000029000000000336004b00000000030100190000017d0000613d000000930000013d0000000001000416000000000101004b0000012f0000c13d000000040100008a00000000011000310000007002000041000000200310008c000000000300001900000000030240190000007001100197000000000401004b000000000200a019000000700110009c00000000010300190000000001026019000000000101004b0000012f0000c13d00000004010000390000000101100367000000000201043b000000710120009c0000012f0000213d000000000100041100000000001004350000000101000039000000200010043f0000000001000019000400000002001d019901820000040f000000000201041a00000073022001970000000403000029000000000232019f000000000021041b00000000010000190000019a0001042e0000000001000416000000000101004b0000012f0000c13d000000040100008a00000000011000310000007002000041000000200310008c000000000300001900000000030240190000007001100197000000000401004b000000000200a019000000700110009c00000000010300190000000001026019000000000101004b0000012f0000c13d00000004010000390000000101100367000000000101043b000000710210009c000001310000a13d00000000010000190000019b0001043000000000001004350000000101000039000000200010043f0000000001000019019901820000040f000000000101041a0000007101100197000000800010043f0000007b010000410000019a0001042e000000400100043d00000044021000390000007a030000410000000000320435000000240210003900000019030000390000000000320435000000780200004100000000002104350000000402100039000000200300003900000000003204350000006802000041000000680310009c0000000001028019000000400110021000000079011001c70000019b000104300000000000200435000000200000043f0000000001000019000400000003001d019901820000040f0000000402000029000000000021041b00000000010000190000019a0001042e0000000103100039000000000203041a000000000202004b0000016c0000c13d000000000401041a00002710524000c9000000000504004b000001610000613d00000000544200d9000027100440008c000000930000c13d0000000405000029000000000405004b000000000405001900000000050100190000017d0000c13d000000750100004100000000001004350000001201000039000000040010043f00000076010000410000019b00010430000000400100043d00000044021000390000007703000041000000000032043500000078020000410000000000210435000000240210003900000020030000390000000000320435000000040210003900000000003204350000006802000041000000680310009c0000000001028019000000400110021000000079011001c70000019b0001043000000000214200d9000000000013041b000000000005041b00000000010000190000019a0001042e00000068020000410000000003000414000000680430009c0000000003028019000000680410009c00000000010280190000004001100210000000c002300210000000000112019f00000074011001c70000801002000039019901940000040f0000000102200190000001920000613d000000000101043b000000000001042d00000000010000190000019b0001043000000197002104230000000102000039000000000001042d0000000002000019000000000001042d00000199000004320000019a0001042e0000019b00010430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff000000020000000000000000000000000000004000000100000000000000000000000000000000000000000000000000000000000000000000000000919722ba00000000000000000000000000000000000000000000000000000000919722bb00000000000000000000000000000000000000000000000000000000b3ab15fb00000000000000000000000000000000000000000000000000000000cff9f1120000000000000000000000000000000000000000000000000000000038a6fe510000000000000000000000000000000000000000000000000000000047e7ef248000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000040000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000002000000000000000000000000000000000000400000000000000000000000004e487b710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000240000000000000000000000004d6f636b537761702e737761702077726f6e6720636f6e66696720747261646508c379a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640000000000000000000000004d6f636b537761702e73776170206e6f7420616c6c6f776564000000000000000000000000000000000000000000000000000020000000800000000000000000155e8d1ded5cec41f7663569d9b4286fd60750b2a1d7151dcfbde0b00e031092";

type MockSwapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockSwapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockSwap__factory extends ContractFactory {
  constructor(...args: MockSwapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockSwap> {
    return super.deploy(overrides || {}) as Promise<MockSwap>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockSwap {
    return super.attach(address) as MockSwap;
  }
  override connect(signer: Signer): MockSwap__factory {
    return super.connect(signer) as MockSwap__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockSwapInterface {
    return new utils.Interface(_abi) as MockSwapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockSwap {
    return new Contract(address, _abi, signerOrProvider) as MockSwap;
  }
}
